import TaelinArena.Game

enum
| FINN_IDLE
| FINN_TRIPLE_TAKE
| FINN_BMO_S_FLASH
| FINN_BOW
| FINN_JAKES_FURY
| FINN_EVADE
| FINN_TAUNT


medium_dist : Number
  200
long_dist : Number
  300


finn_fun(self: Thing) : Thing
  let self = self <= thing(mov = 5, mhp = 24)

  case self |thing switch self.act

  |FINN_IDLE
    if is_walking(self)
    then animate(self, 1, FINN_WALK_CYCLE_000, 8, 16)
    else animate(self, 1, FINN_IDLE_000, 5, 10)

  // Left 
  |FINN_TRIPLE_TAKE
    let self = animate(self, 1, FINN_TRIPLE_TAKE_000, 17, 34)
    let effs = [damage(DMG_LV_2)]
    let hits = [hit(effs, at_dist(self, 35), self.dir, cbox(20))]
    let crit = [hit([damage(DMG_LV_4)], at_dist(self, 35), self.dir, cbox(20))]
    let self = cast(self, 0, hits)
    let self = cast(self, 10, hits)
    let self = cast(self, 30, crit)
    self 

  // Middle
  |FINN_BMO_S_FLASH
    let self = animate(self, 0, FINN_BMO_S_FLASH_000, 13, 26)
    let effs = [damage(DMG_LV_2)]
    let hits = [hit(effs, at_dist(self, 45), self.dir, cbox(25))]
    let self = cast(self,16, hits)
    self

  // Right
  |FINN_BOW
    let self = animate(self, 0, FINN_BOW_CAST_ANIMATION_000, 7, 14)
    let effs = [damage(DMG_LV_3)]
    let hits = [hit(effs, at_dist(self, 140), self.dir, cbox(10))]
    let proj = new_thing <= thing(
      fun = finn_arrow_fun,
      pos = self.pos,
      dir = self.dir,
      vel = scale_v3(15, targ_dir(self)),
      box = nbox)
    let self = spawn(self, 3, [proj])
    let self = cast(self, 13, hits)
    self

  // Q
  |FINN_JAKES_FURY
    let self = animate(self, 1, FINN_TAUNT_000, 17, 34)
    let jake = new_thing <= thing(fun=finn_jakes_fury_fun, dir=targ_dir(self))
    let self = spawn(self, 14, [move(jake, at_dist(self, 35))])
    let effs = [damage(DMG_LV_2)]
    let hits0 = [hit(effs, at_dist(self, 35), self.dir, cbox(15))]
    let hits1 = [hit(effs, at_dist(self, 45), self.dir, cbox(15))]
    let hits2 = [hit(effs, at_dist(self, 60), self.dir, cbox(15))]
    let crit = [damage(DMG_LV_4), impulse(10, self.dir)]
    let hits_critical = [hit(crit, at_dist(self, 80), self.dir, cbox(15))]
    let self = cast(self, 15, hits0)
    let self = cast(self, 20, hits1)
    let self = cast(self, 25, hits2)
    let self = cast(self, 30, hits_critical)
    self

  // Space
  | FINN_EVADE
    let self = animate(self, 1, FINN_EVADE_000, 6, 12)
    let self = dash(self, 4, 0, 12) 
    self

  // E
  | FINN_TAUNT
    animate(self, 0, FINN_TAUNT_000, 17, 34)


  else self


// Effects
finn_arrow_fun(self: Thing) : Thing
  animate_die(self, 0, FINN_BOW_PROJECTILE_000, 1, 10)

finn_triple_take_effect(self: Thing) : Thing 
  case self |thing
  let self = animate_die(self, 0, FINN_TRIPLE_TAKE_AUX_000, 1, 2)
  let self = self <= thing(box = nbox)
  let effs = [damage(DMG_LV_2)]
  let hits = [hit(effs, self.pos, self.dir, cbox(20))]
  let self = cast(self, 0, hits)
  self
  
// TODO: second attack out of position
finn_jakes_fury_fun(self: Thing) : Thing
  animate_die(self, 0, FINN_JAKE_S_FURY_000, 26, 26)

